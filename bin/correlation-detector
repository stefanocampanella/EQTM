#! /usr/bin/env python
import argparse
import logging
from concurrent.futures import ThreadPoolExecutor
from importlib import resources
from pathlib import Path
from time import perf_counter as timer

import bottleneck as bn
import numpy as np
from obspy import Stream

from scipy.signal import find_peaks
from psutil import cpu_count
from tqdm import tqdm
from fastavro.schema import load_schema

import correlation_detector as cd

parser = argparse.ArgumentParser(prog="correlation-detector")
parser.add_argument("data", help="Continuous data path", type=Path)
parser.add_argument("travel_times", help="Path to travel times directory", type=Path)
parser.add_argument("templates", help="Path to templates directory", type=Path)
parser.add_argument("catalog", help="Path to event catalog", type=Path)
parser.add_argument("output", help="Output file path")
parser.add_argument("--max_channels", help="Maximum number of channels used for computing cross-correlation", type=int,
                    default=16)
parser.add_argument("--lowpass", help="Lowpass filter frequency", type=float, default=3.0)
parser.add_argument("--highpass", help="Highpass filter frequency", type=float, default=8.0)
parser.add_argument("--relative_height", help="Scale factor of mean correlation peak threshold", type=float,
                    default=8.0)
parser.add_argument("--relative_distance", help="Scale factor of mean correlation peak distance", type=float,
                    default=2.0)
parser.add_argument("--mag_relative_threshold", help="Scale factor of channel magnitude MAD threshold", type=float,
                    default=2.0)
parser.add_argument("--min_std", help="Scale factor of correlation std min threshold", type=float, default=0.25)
parser.add_argument("--max_std", help="Scale factor of correlation std max threshold", type=float, default=1.5)
parser.add_argument("--tolerance", help="Maximum lag in samples", type=int, default=6)
parser.add_argument("--log", help="Log level", default='warning')
parser.add_argument("--threads", help="Number of threads to use", type=int, default=0)
parser.add_argument("--progress", help="Show progress bar", default=None, action='store_true')
parser.add_argument("--json", help="Save output in json format", default=False, action='store_true')
parser.add_argument("--stop", help="Stop if an error occurs", default=False, action='store_true')
cli_args = parser.parse_args()

logging.basicConfig(format='%(asctime)s-%(levelname)s: %(message)s', level=getattr(logging, cli_args.log.upper()))

with resources.path('correlation_detector', 'event.avsc') as schema_path:
    schema = load_schema(schema_path)

if cli_args.json:
    from fastavro import json_writer as writer
    output = cli_args.output + '.jsonl'
    mode = 'w'
else:
    from fastavro import writer
    output = cli_args.output + '.avro'
    mode = 'wb'

if __name__ == '__main__':
    tic = timer()
    data_pool = cd.read_data(cli_args.data, freqmin=cli_args.lowpass, freqmax=cli_args.highpass)
    templates = tqdm(cd.read_templates(cli_args.templates, cli_args.travel_times, cli_args.catalog),
                     total=len(list(cli_args.travel_times.glob('*.ttimes'))),
                     disable=cli_args.progress)
    max_workers = cli_args.threads if cli_args.threads > 0 else cpu_count(logical=False)
    events = []
    with ThreadPoolExecutor(max_workers=max_workers) as pool:
        for index, template, ttimes, magnitude in templates:
            try:
                data, template, ttimes = cd.match_traces(data_pool, template, ttimes, cli_args.max_channels)
                correlations = Stream(traces=pool.map(cd.correlate_trace, data, template, ttimes.values()))
                cd.filter_data(correlations, data, template, ttimes, min_std=cli_args.min_std,
                               max_std=cli_args.max_std, mapf=pool.map)
                if correlations:
                    mean_correlation = bn.nanmean([trace.data for trace in correlations], axis=0)
                    dmad = bn.nanmean(np.abs(mean_correlation - bn.nanmedian(mean_correlation)))
                    height = cli_args.relative_height * dmad
                    distance = max(trace.stats.npts for trace in template)
                    peaks, properties = find_peaks(mean_correlation, height=height, distance=distance)
                    detections = cd.get_detections(peaks, correlations, data, template, ttimes,
                                                   tolerance=cli_args.tolerance,
                                                   mag_relative_threshold=cli_args.mag_relative_threshold,
                                                   mapf=pool.map)
                    detections = cd.add_template_info(detections, properties['peak_heights'], index, magnitude, dmad)
                    events.extend(detections)
            except Exception as error:
                if cli_args.stop:
                    raise error
                else:
                    logging.error(f"{error} occurred while processing template {index}")
    with open(output, mode) as file:
        logging.info(f"Writing output to {file.name}")
        writer(file, schema, events)
    toc = timer()
    logging.info(f"Elapsed time: {toc - tic:.2f} seconds.")
