#! /usr/bin/env python
import argparse
import logging
from pathlib import Path
from time import perf_counter as timer

import pandas as pd

import correlation_detector as cd

parser = argparse.ArgumentParser(prog=__file__)
parser.add_argument("input", help="Input file path, location of the jsonl/avro file", type=Path)
parser.add_argument("output", help="Output file path, stem of the output cat and stats file", type=Path)
parser.add_argument("--corr_threshold", help="Correlation threshold per channels", type=float, default=0.4)
parser.add_argument("--mag_threshold", help="Scale factor of channel magnitude MAD threshold", type=float,
                    default=2.0)
parser.add_argument("--log", help="Log level", default='info')
parser.add_argument("--sort", help="Sort output by template", default=False, action='store_true')

cli_args = parser.parse_args()

logging.basicConfig(format='%(levelname)s-%(asctime)s: %(message)s',
                    level=getattr(logging, cli_args.log.upper()))

if __name__ == '__main__':
    logging.info(f"Running {parser.prog} with the following parameters: {vars(cli_args)}")
    tic = timer()
    logging.info(f"Reading from {cli_args.input}")
    catalogue = pd.read_parquet(cli_args.input, engine='fastparquet')
    catalogue.reset_index(inplace=True)
    records = [cd.make_legacy_record(event, cli_args.corr_threshold, cli_args.mag_threshold)
               for event in catalogue.to_dict(orient='records')]
    if cli_args.sort:
        records.sort(key=lambda event: (event['template'], event['timestamp']))
    logging.info(f"Writing {len(records)} {'events' if len(records) > 1 else 'event'} "
                 f"to {cli_args.output}.cat and {cli_args.output}.stats")
    cat = cli_args.output.with_suffix('.cat')
    if cat.exists():
        logging.info(f"{cat} already exists, it will be overwritten")
    with cat.open('w') as file:
        file.writelines(map(cd.format_cat, records))
    stats = cli_args.output.with_suffix('.stats')
    if stats.exists():
        logging.info(f"{stats} already exists, it will be overwritten")
    with stats.open('w') as file:
        file.writelines(map(cd.format_stats, records))
    toc = timer()
    logging.info(f"Elapsed time: {toc - tic:.2f} seconds")
