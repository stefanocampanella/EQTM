#! /usr/bin/env bash
#SBATCH --job-name=<JOB_NAME>
#SBATCH --account=<ACCOUNT>
#SBATCH --partition=<PARTITION>
#SBATCH --time=<TIME>
#SBATCH --ntasks=1
#SBATCH --cpus-per-task=<NUM_CPUS>
#SBATCH --gres=gpu:<NUM_GPUS>
#SBATCH --output=<LOG_PATH>/%A_%a.log
#SBATCH	--requeue
#SBATCH --verbose

DATA_ROOT=<DATA_ROOT>
DATA_DIR=$DATA_ROOT/<DATA>
TEMPLATES_DIR=$DATA_ROOT/<TEMPLATES>
TEMPLATES_BATCHES_DIR=$TEMPLATES_DIR/<TEMPLATES_BATCHES>
TTIMES_RELPATH=<TRAVEL_TIMES>
TEMPLATES_DATA_RELPATH=<TRAVEL_TIMES>
CATALOGUE=$TEMPLATES_DIR/<CATALOGUE>

OUTPUT_DIR=$DATA_ROOT/<OUTPUT_DIR>
AVRO_BATCHES_DIR=$TMPDIR/outputs
AVRO_DIR=$OUTPUT_DIR/<AVRO>
PARQUET_DIR=$OUTPUT_ROOT/<PARQUET>

DATA=$DATA_DIR/$1
DATA_NAME=$(basename "${DATA%.mseed}")

mkdir -p "$AVRO_BATCHES_DIR"
mapfile -t TEMPLATES_BATCHES < <(find "$TEMPLATES_BATCHES_DIR" -type d -mindepth 1 -maxdepth 1 | sort -n)
for BATCH in "${!TEMPLATES_BATCHES[@]}"
do
  TEMPLATES_BATCH=${TEMPLATES_BATCHES[BATCH]}
  AVRO_BATCH=$AVRO_BATCHES_DIR/${DATA_NAME}_$BATCH
  export CUDA_VISIBLE_DEVICES=$((BATCH % 4)),
  eqtm-scan "$DATA" "$TEMPLATES_BATCH/$TTIMES_RELPATH" "$TEMPLATES_BATCH/$TEMPLATES_DATA_RELPATH" "$AVRO_BATCH" &
done
wait

mkdir -p "$AVRO_DIR"
AVRO=$AVRO_DIR/$DATA_NAME
eqtm-cat "$AVRO_BATCHES_DIR" "$AVRO"
mkdir -p "$PARQUET_DIR"
PARQUET=$PARQUET_DIR/$DATA_NAME
eqtm-avro2parquet "$CATALOGUE" "${AVRO}.avro" "$PARQUET"

exit
